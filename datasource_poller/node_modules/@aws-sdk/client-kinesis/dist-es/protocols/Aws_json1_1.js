import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, throwDefaultError, } from "@aws-sdk/smithy-client";
import { KinesisServiceException as __BaseException } from "../models/KinesisServiceException";
import { ExpiredIteratorException, ExpiredNextTokenException, InternalFailureException, InvalidArgumentException, KMSAccessDeniedException, KMSDisabledException, KMSInvalidStateException, KMSNotFoundException, KMSOptInRequired, KMSThrottlingException, LimitExceededException, ProvisionedThroughputExceededException, ResourceInUseException, ResourceNotFoundException, ValidationException, } from "../models/models_0";
export const serializeAws_json1_1AddTagsToStreamCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.AddTagsToStream",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1AddTagsToStreamInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateStreamCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.CreateStream",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateStreamInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DecreaseStreamRetentionPeriodCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.DecreaseStreamRetentionPeriod",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DecreaseStreamRetentionPeriodInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteStreamCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.DeleteStream",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteStreamInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeregisterStreamConsumerCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.DeregisterStreamConsumer",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeregisterStreamConsumerInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeLimitsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.DescribeLimits",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeLimitsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeStreamCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.DescribeStream",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeStreamInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeStreamConsumerCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.DescribeStreamConsumer",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeStreamConsumerInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeStreamSummaryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.DescribeStreamSummary",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeStreamSummaryInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DisableEnhancedMonitoringCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.DisableEnhancedMonitoring",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DisableEnhancedMonitoringInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1EnableEnhancedMonitoringCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.EnableEnhancedMonitoring",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1EnableEnhancedMonitoringInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetRecordsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.GetRecords",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetRecordsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetShardIteratorCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.GetShardIterator",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetShardIteratorInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1IncreaseStreamRetentionPeriodCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.IncreaseStreamRetentionPeriod",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1IncreaseStreamRetentionPeriodInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListShardsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.ListShards",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListShardsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListStreamConsumersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.ListStreamConsumers",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListStreamConsumersInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListStreamsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.ListStreams",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListStreamsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListTagsForStreamCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.ListTagsForStream",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTagsForStreamInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1MergeShardsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.MergeShards",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1MergeShardsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1PutRecordCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.PutRecord",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutRecordInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1PutRecordsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.PutRecords",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutRecordsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1RegisterStreamConsumerCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.RegisterStreamConsumer",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1RegisterStreamConsumerInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1RemoveTagsFromStreamCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.RemoveTagsFromStream",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1RemoveTagsFromStreamInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1SplitShardCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.SplitShard",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1SplitShardInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StartStreamEncryptionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.StartStreamEncryption",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartStreamEncryptionInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StopStreamEncryptionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.StopStreamEncryption",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopStreamEncryptionInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1SubscribeToShardCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.SubscribeToShard",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1SubscribeToShardInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateShardCountCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.UpdateShardCount",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateShardCountInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateStreamModeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Kinesis_20131202.UpdateStreamMode",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateStreamModeInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const deserializeAws_json1_1AddTagsToStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1AddTagsToStreamCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1AddTagsToStreamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.kinesis#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateStreamCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateStreamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.kinesis#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DecreaseStreamRetentionPeriodCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DecreaseStreamRetentionPeriodCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DecreaseStreamRetentionPeriodCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.kinesis#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteStreamCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteStreamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.kinesis#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeregisterStreamConsumerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeregisterStreamConsumerCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeregisterStreamConsumerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeLimitsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeLimitsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeLimitsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeLimitsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeStreamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeStreamOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeStreamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeStreamConsumerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeStreamConsumerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeStreamConsumerOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeStreamConsumerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeStreamSummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeStreamSummaryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeStreamSummaryOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeStreamSummaryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DisableEnhancedMonitoringCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DisableEnhancedMonitoringCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1EnhancedMonitoringOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DisableEnhancedMonitoringCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.kinesis#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1EnableEnhancedMonitoringCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1EnableEnhancedMonitoringCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1EnhancedMonitoringOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1EnableEnhancedMonitoringCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.kinesis#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetRecordsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetRecordsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetRecordsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetRecordsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ExpiredIteratorException":
        case "com.amazonaws.kinesis#ExpiredIteratorException":
            throw await deserializeAws_json1_1ExpiredIteratorExceptionResponse(parsedOutput, context);
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "KMSAccessDeniedException":
        case "com.amazonaws.kinesis#KMSAccessDeniedException":
            throw await deserializeAws_json1_1KMSAccessDeniedExceptionResponse(parsedOutput, context);
        case "KMSDisabledException":
        case "com.amazonaws.kinesis#KMSDisabledException":
            throw await deserializeAws_json1_1KMSDisabledExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kinesis#KMSInvalidStateException":
            throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "KMSNotFoundException":
        case "com.amazonaws.kinesis#KMSNotFoundException":
            throw await deserializeAws_json1_1KMSNotFoundExceptionResponse(parsedOutput, context);
        case "KMSOptInRequired":
        case "com.amazonaws.kinesis#KMSOptInRequired":
            throw await deserializeAws_json1_1KMSOptInRequiredResponse(parsedOutput, context);
        case "KMSThrottlingException":
        case "com.amazonaws.kinesis#KMSThrottlingException":
            throw await deserializeAws_json1_1KMSThrottlingExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.kinesis#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetShardIteratorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetShardIteratorCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetShardIteratorOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetShardIteratorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.kinesis#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1IncreaseStreamRetentionPeriodCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1IncreaseStreamRetentionPeriodCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.kinesis#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListShardsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListShardsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListShardsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListShardsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ExpiredNextTokenException":
        case "com.amazonaws.kinesis#ExpiredNextTokenException":
            throw await deserializeAws_json1_1ExpiredNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.kinesis#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListStreamConsumersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListStreamConsumersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListStreamConsumersOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListStreamConsumersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ExpiredNextTokenException":
        case "com.amazonaws.kinesis#ExpiredNextTokenException":
            throw await deserializeAws_json1_1ExpiredNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.kinesis#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListStreamsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListStreamsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListStreamsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListStreamsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListTagsForStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTagsForStreamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTagsForStreamOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListTagsForStreamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1MergeShardsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1MergeShardsCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1MergeShardsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.kinesis#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kinesis#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1PutRecordCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutRecordCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutRecordOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1PutRecordCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "KMSAccessDeniedException":
        case "com.amazonaws.kinesis#KMSAccessDeniedException":
            throw await deserializeAws_json1_1KMSAccessDeniedExceptionResponse(parsedOutput, context);
        case "KMSDisabledException":
        case "com.amazonaws.kinesis#KMSDisabledException":
            throw await deserializeAws_json1_1KMSDisabledExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kinesis#KMSInvalidStateException":
            throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "KMSNotFoundException":
        case "com.amazonaws.kinesis#KMSNotFoundException":
            throw await deserializeAws_json1_1KMSNotFoundExceptionResponse(parsedOutput, context);
        case "KMSOptInRequired":
        case "com.amazonaws.kinesis#KMSOptInRequired":
            throw await deserializeAws_json1_1KMSOptInRequiredResponse(parsedOutput, context);
        case "KMSThrottlingException":
        case "com.amazonaws.kinesis#KMSThrottlingException":
            throw await deserializeAws_json1_1KMSThrottlingExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.kinesis#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1PutRecordsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutRecordsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutRecordsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1PutRecordsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "KMSAccessDeniedException":
        case "com.amazonaws.kinesis#KMSAccessDeniedException":
            throw await deserializeAws_json1_1KMSAccessDeniedExceptionResponse(parsedOutput, context);
        case "KMSDisabledException":
        case "com.amazonaws.kinesis#KMSDisabledException":
            throw await deserializeAws_json1_1KMSDisabledExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kinesis#KMSInvalidStateException":
            throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "KMSNotFoundException":
        case "com.amazonaws.kinesis#KMSNotFoundException":
            throw await deserializeAws_json1_1KMSNotFoundExceptionResponse(parsedOutput, context);
        case "KMSOptInRequired":
        case "com.amazonaws.kinesis#KMSOptInRequired":
            throw await deserializeAws_json1_1KMSOptInRequiredResponse(parsedOutput, context);
        case "KMSThrottlingException":
        case "com.amazonaws.kinesis#KMSThrottlingException":
            throw await deserializeAws_json1_1KMSThrottlingExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.kinesis#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1RegisterStreamConsumerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1RegisterStreamConsumerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1RegisterStreamConsumerOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1RegisterStreamConsumerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.kinesis#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1RemoveTagsFromStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1RemoveTagsFromStreamCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1RemoveTagsFromStreamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.kinesis#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1SplitShardCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1SplitShardCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1SplitShardCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.kinesis#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kinesis#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StartStreamEncryptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartStreamEncryptionCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StartStreamEncryptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "KMSAccessDeniedException":
        case "com.amazonaws.kinesis#KMSAccessDeniedException":
            throw await deserializeAws_json1_1KMSAccessDeniedExceptionResponse(parsedOutput, context);
        case "KMSDisabledException":
        case "com.amazonaws.kinesis#KMSDisabledException":
            throw await deserializeAws_json1_1KMSDisabledExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.kinesis#KMSInvalidStateException":
            throw await deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "KMSNotFoundException":
        case "com.amazonaws.kinesis#KMSNotFoundException":
            throw await deserializeAws_json1_1KMSNotFoundExceptionResponse(parsedOutput, context);
        case "KMSOptInRequired":
        case "com.amazonaws.kinesis#KMSOptInRequired":
            throw await deserializeAws_json1_1KMSOptInRequiredResponse(parsedOutput, context);
        case "KMSThrottlingException":
        case "com.amazonaws.kinesis#KMSThrottlingException":
            throw await deserializeAws_json1_1KMSThrottlingExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.kinesis#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StopStreamEncryptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopStreamEncryptionCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StopStreamEncryptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.kinesis#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1SubscribeToShardCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1SubscribeToShardCommandError(output, context);
    }
    const contents = { EventStream: deserializeAws_json1_1SubscribeToShardEventStream(output.body, context) };
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1SubscribeToShardCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.kinesis#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateShardCountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateShardCountCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateShardCountOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateShardCountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.kinesis#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kinesis#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateStreamModeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateStreamModeCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateStreamModeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgumentException":
        case "com.amazonaws.kinesis#InvalidArgumentException":
            throw await deserializeAws_json1_1InvalidArgumentExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.kinesis#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.kinesis#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesis#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ExpiredIteratorExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ExpiredIteratorException(body, context);
    const exception = new ExpiredIteratorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ExpiredNextTokenExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ExpiredNextTokenException(body, context);
    const exception = new ExpiredNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InvalidArgumentExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidArgumentException(body, context);
    const exception = new InvalidArgumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1KMSAccessDeniedExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1KMSAccessDeniedException(body, context);
    const exception = new KMSAccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1KMSDisabledExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1KMSDisabledException(body, context);
    const exception = new KMSDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1KMSInvalidStateExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1KMSInvalidStateException(body, context);
    const exception = new KMSInvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1KMSNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1KMSNotFoundException(body, context);
    const exception = new KMSNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1KMSOptInRequiredResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1KMSOptInRequired(body, context);
    const exception = new KMSOptInRequired({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1KMSThrottlingExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1KMSThrottlingException(body, context);
    const exception = new KMSThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1LimitExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1LimitExceededException(body, context);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ProvisionedThroughputExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ProvisionedThroughputExceededException(body, context);
    const exception = new ProvisionedThroughputExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ResourceInUseExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceInUseException(body, context);
    const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ValidationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ValidationException(body, context);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1SubscribeToShardEventStream = (output, context) => {
    return context.eventStreamMarshaller.deserialize(output, async (event) => {
        if (event["SubscribeToShardEvent"] != null) {
            return {
                SubscribeToShardEvent: await deserializeAws_json1_1SubscribeToShardEvent_event(event["SubscribeToShardEvent"], context),
            };
        }
        if (event["ResourceNotFoundException"] != null) {
            return {
                ResourceNotFoundException: await deserializeAws_json1_1ResourceNotFoundException_event(event["ResourceNotFoundException"], context),
            };
        }
        if (event["ResourceInUseException"] != null) {
            return {
                ResourceInUseException: await deserializeAws_json1_1ResourceInUseException_event(event["ResourceInUseException"], context),
            };
        }
        if (event["KMSDisabledException"] != null) {
            return {
                KMSDisabledException: await deserializeAws_json1_1KMSDisabledException_event(event["KMSDisabledException"], context),
            };
        }
        if (event["KMSInvalidStateException"] != null) {
            return {
                KMSInvalidStateException: await deserializeAws_json1_1KMSInvalidStateException_event(event["KMSInvalidStateException"], context),
            };
        }
        if (event["KMSAccessDeniedException"] != null) {
            return {
                KMSAccessDeniedException: await deserializeAws_json1_1KMSAccessDeniedException_event(event["KMSAccessDeniedException"], context),
            };
        }
        if (event["KMSNotFoundException"] != null) {
            return {
                KMSNotFoundException: await deserializeAws_json1_1KMSNotFoundException_event(event["KMSNotFoundException"], context),
            };
        }
        if (event["KMSOptInRequired"] != null) {
            return {
                KMSOptInRequired: await deserializeAws_json1_1KMSOptInRequired_event(event["KMSOptInRequired"], context),
            };
        }
        if (event["KMSThrottlingException"] != null) {
            return {
                KMSThrottlingException: await deserializeAws_json1_1KMSThrottlingException_event(event["KMSThrottlingException"], context),
            };
        }
        if (event["InternalFailureException"] != null) {
            return {
                InternalFailureException: await deserializeAws_json1_1InternalFailureException_event(event["InternalFailureException"], context),
            };
        }
        return { $unknown: output };
    });
};
const deserializeAws_json1_1InternalFailureException_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    return deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context);
};
const deserializeAws_json1_1KMSAccessDeniedException_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    return deserializeAws_json1_1KMSAccessDeniedExceptionResponse(parsedOutput, context);
};
const deserializeAws_json1_1KMSDisabledException_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    return deserializeAws_json1_1KMSDisabledExceptionResponse(parsedOutput, context);
};
const deserializeAws_json1_1KMSInvalidStateException_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    return deserializeAws_json1_1KMSInvalidStateExceptionResponse(parsedOutput, context);
};
const deserializeAws_json1_1KMSNotFoundException_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    return deserializeAws_json1_1KMSNotFoundExceptionResponse(parsedOutput, context);
};
const deserializeAws_json1_1KMSOptInRequired_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    return deserializeAws_json1_1KMSOptInRequiredResponse(parsedOutput, context);
};
const deserializeAws_json1_1KMSThrottlingException_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    return deserializeAws_json1_1KMSThrottlingExceptionResponse(parsedOutput, context);
};
const deserializeAws_json1_1ResourceInUseException_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    return deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
};
const deserializeAws_json1_1ResourceNotFoundException_event = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    return deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
};
const deserializeAws_json1_1SubscribeToShardEvent_event = async (output, context) => {
    const contents = {};
    const data = await parseBody(output.body, context);
    Object.assign(contents, deserializeAws_json1_1SubscribeToShardEvent(data, context));
    return contents;
};
const deserializeAws_json1_1InternalFailureExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InternalFailureException(body, context);
    const exception = new InternalFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const serializeAws_json1_1AddTagsToStreamInput = (input, context) => {
    return {
        ...(input.StreamName != null && { StreamName: input.StreamName }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1TagMap(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateStreamInput = (input, context) => {
    return {
        ...(input.ShardCount != null && { ShardCount: input.ShardCount }),
        ...(input.StreamModeDetails != null && {
            StreamModeDetails: serializeAws_json1_1StreamModeDetails(input.StreamModeDetails, context),
        }),
        ...(input.StreamName != null && { StreamName: input.StreamName }),
    };
};
const serializeAws_json1_1DecreaseStreamRetentionPeriodInput = (input, context) => {
    return {
        ...(input.RetentionPeriodHours != null && { RetentionPeriodHours: input.RetentionPeriodHours }),
        ...(input.StreamName != null && { StreamName: input.StreamName }),
    };
};
const serializeAws_json1_1DeleteStreamInput = (input, context) => {
    return {
        ...(input.EnforceConsumerDeletion != null && { EnforceConsumerDeletion: input.EnforceConsumerDeletion }),
        ...(input.StreamName != null && { StreamName: input.StreamName }),
    };
};
const serializeAws_json1_1DeregisterStreamConsumerInput = (input, context) => {
    return {
        ...(input.ConsumerARN != null && { ConsumerARN: input.ConsumerARN }),
        ...(input.ConsumerName != null && { ConsumerName: input.ConsumerName }),
        ...(input.StreamARN != null && { StreamARN: input.StreamARN }),
    };
};
const serializeAws_json1_1DescribeLimitsInput = (input, context) => {
    return {};
};
const serializeAws_json1_1DescribeStreamConsumerInput = (input, context) => {
    return {
        ...(input.ConsumerARN != null && { ConsumerARN: input.ConsumerARN }),
        ...(input.ConsumerName != null && { ConsumerName: input.ConsumerName }),
        ...(input.StreamARN != null && { StreamARN: input.StreamARN }),
    };
};
const serializeAws_json1_1DescribeStreamInput = (input, context) => {
    return {
        ...(input.ExclusiveStartShardId != null && { ExclusiveStartShardId: input.ExclusiveStartShardId }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.StreamName != null && { StreamName: input.StreamName }),
    };
};
const serializeAws_json1_1DescribeStreamSummaryInput = (input, context) => {
    return {
        ...(input.StreamName != null && { StreamName: input.StreamName }),
    };
};
const serializeAws_json1_1DisableEnhancedMonitoringInput = (input, context) => {
    return {
        ...(input.ShardLevelMetrics != null && {
            ShardLevelMetrics: serializeAws_json1_1MetricsNameList(input.ShardLevelMetrics, context),
        }),
        ...(input.StreamName != null && { StreamName: input.StreamName }),
    };
};
const serializeAws_json1_1EnableEnhancedMonitoringInput = (input, context) => {
    return {
        ...(input.ShardLevelMetrics != null && {
            ShardLevelMetrics: serializeAws_json1_1MetricsNameList(input.ShardLevelMetrics, context),
        }),
        ...(input.StreamName != null && { StreamName: input.StreamName }),
    };
};
const serializeAws_json1_1GetRecordsInput = (input, context) => {
    return {
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.ShardIterator != null && { ShardIterator: input.ShardIterator }),
    };
};
const serializeAws_json1_1GetShardIteratorInput = (input, context) => {
    return {
        ...(input.ShardId != null && { ShardId: input.ShardId }),
        ...(input.ShardIteratorType != null && { ShardIteratorType: input.ShardIteratorType }),
        ...(input.StartingSequenceNumber != null && { StartingSequenceNumber: input.StartingSequenceNumber }),
        ...(input.StreamName != null && { StreamName: input.StreamName }),
        ...(input.Timestamp != null && { Timestamp: Math.round(input.Timestamp.getTime() / 1000) }),
    };
};
const serializeAws_json1_1IncreaseStreamRetentionPeriodInput = (input, context) => {
    return {
        ...(input.RetentionPeriodHours != null && { RetentionPeriodHours: input.RetentionPeriodHours }),
        ...(input.StreamName != null && { StreamName: input.StreamName }),
    };
};
const serializeAws_json1_1ListShardsInput = (input, context) => {
    return {
        ...(input.ExclusiveStartShardId != null && { ExclusiveStartShardId: input.ExclusiveStartShardId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.ShardFilter != null && { ShardFilter: serializeAws_json1_1ShardFilter(input.ShardFilter, context) }),
        ...(input.StreamCreationTimestamp != null && {
            StreamCreationTimestamp: Math.round(input.StreamCreationTimestamp.getTime() / 1000),
        }),
        ...(input.StreamName != null && { StreamName: input.StreamName }),
    };
};
const serializeAws_json1_1ListStreamConsumersInput = (input, context) => {
    return {
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.StreamARN != null && { StreamARN: input.StreamARN }),
        ...(input.StreamCreationTimestamp != null && {
            StreamCreationTimestamp: Math.round(input.StreamCreationTimestamp.getTime() / 1000),
        }),
    };
};
const serializeAws_json1_1ListStreamsInput = (input, context) => {
    return {
        ...(input.ExclusiveStartStreamName != null && { ExclusiveStartStreamName: input.ExclusiveStartStreamName }),
        ...(input.Limit != null && { Limit: input.Limit }),
    };
};
const serializeAws_json1_1ListTagsForStreamInput = (input, context) => {
    return {
        ...(input.ExclusiveStartTagKey != null && { ExclusiveStartTagKey: input.ExclusiveStartTagKey }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.StreamName != null && { StreamName: input.StreamName }),
    };
};
const serializeAws_json1_1MergeShardsInput = (input, context) => {
    return {
        ...(input.AdjacentShardToMerge != null && { AdjacentShardToMerge: input.AdjacentShardToMerge }),
        ...(input.ShardToMerge != null && { ShardToMerge: input.ShardToMerge }),
        ...(input.StreamName != null && { StreamName: input.StreamName }),
    };
};
const serializeAws_json1_1MetricsNameList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1PutRecordInput = (input, context) => {
    return {
        ...(input.Data != null && { Data: context.base64Encoder(input.Data) }),
        ...(input.ExplicitHashKey != null && { ExplicitHashKey: input.ExplicitHashKey }),
        ...(input.PartitionKey != null && { PartitionKey: input.PartitionKey }),
        ...(input.SequenceNumberForOrdering != null && { SequenceNumberForOrdering: input.SequenceNumberForOrdering }),
        ...(input.StreamName != null && { StreamName: input.StreamName }),
    };
};
const serializeAws_json1_1PutRecordsInput = (input, context) => {
    return {
        ...(input.Records != null && { Records: serializeAws_json1_1PutRecordsRequestEntryList(input.Records, context) }),
        ...(input.StreamName != null && { StreamName: input.StreamName }),
    };
};
const serializeAws_json1_1PutRecordsRequestEntry = (input, context) => {
    return {
        ...(input.Data != null && { Data: context.base64Encoder(input.Data) }),
        ...(input.ExplicitHashKey != null && { ExplicitHashKey: input.ExplicitHashKey }),
        ...(input.PartitionKey != null && { PartitionKey: input.PartitionKey }),
    };
};
const serializeAws_json1_1PutRecordsRequestEntryList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1PutRecordsRequestEntry(entry, context);
    });
};
const serializeAws_json1_1RegisterStreamConsumerInput = (input, context) => {
    return {
        ...(input.ConsumerName != null && { ConsumerName: input.ConsumerName }),
        ...(input.StreamARN != null && { StreamARN: input.StreamARN }),
    };
};
const serializeAws_json1_1RemoveTagsFromStreamInput = (input, context) => {
    return {
        ...(input.StreamName != null && { StreamName: input.StreamName }),
        ...(input.TagKeys != null && { TagKeys: serializeAws_json1_1TagKeyList(input.TagKeys, context) }),
    };
};
const serializeAws_json1_1ShardFilter = (input, context) => {
    return {
        ...(input.ShardId != null && { ShardId: input.ShardId }),
        ...(input.Timestamp != null && { Timestamp: Math.round(input.Timestamp.getTime() / 1000) }),
        ...(input.Type != null && { Type: input.Type }),
    };
};
const serializeAws_json1_1SplitShardInput = (input, context) => {
    return {
        ...(input.NewStartingHashKey != null && { NewStartingHashKey: input.NewStartingHashKey }),
        ...(input.ShardToSplit != null && { ShardToSplit: input.ShardToSplit }),
        ...(input.StreamName != null && { StreamName: input.StreamName }),
    };
};
const serializeAws_json1_1StartingPosition = (input, context) => {
    return {
        ...(input.SequenceNumber != null && { SequenceNumber: input.SequenceNumber }),
        ...(input.Timestamp != null && { Timestamp: Math.round(input.Timestamp.getTime() / 1000) }),
        ...(input.Type != null && { Type: input.Type }),
    };
};
const serializeAws_json1_1StartStreamEncryptionInput = (input, context) => {
    return {
        ...(input.EncryptionType != null && { EncryptionType: input.EncryptionType }),
        ...(input.KeyId != null && { KeyId: input.KeyId }),
        ...(input.StreamName != null && { StreamName: input.StreamName }),
    };
};
const serializeAws_json1_1StopStreamEncryptionInput = (input, context) => {
    return {
        ...(input.EncryptionType != null && { EncryptionType: input.EncryptionType }),
        ...(input.KeyId != null && { KeyId: input.KeyId }),
        ...(input.StreamName != null && { StreamName: input.StreamName }),
    };
};
const serializeAws_json1_1StreamModeDetails = (input, context) => {
    return {
        ...(input.StreamMode != null && { StreamMode: input.StreamMode }),
    };
};
const serializeAws_json1_1SubscribeToShardInput = (input, context) => {
    return {
        ...(input.ConsumerARN != null && { ConsumerARN: input.ConsumerARN }),
        ...(input.ShardId != null && { ShardId: input.ShardId }),
        ...(input.StartingPosition != null && {
            StartingPosition: serializeAws_json1_1StartingPosition(input.StartingPosition, context),
        }),
    };
};
const serializeAws_json1_1TagKeyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1TagMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = value;
        return acc;
    }, {});
};
const serializeAws_json1_1UpdateShardCountInput = (input, context) => {
    return {
        ...(input.ScalingType != null && { ScalingType: input.ScalingType }),
        ...(input.StreamName != null && { StreamName: input.StreamName }),
        ...(input.TargetShardCount != null && { TargetShardCount: input.TargetShardCount }),
    };
};
const serializeAws_json1_1UpdateStreamModeInput = (input, context) => {
    return {
        ...(input.StreamARN != null && { StreamARN: input.StreamARN }),
        ...(input.StreamModeDetails != null && {
            StreamModeDetails: serializeAws_json1_1StreamModeDetails(input.StreamModeDetails, context),
        }),
    };
};
const deserializeAws_json1_1ChildShard = (output, context) => {
    return {
        HashKeyRange: output.HashKeyRange != null ? deserializeAws_json1_1HashKeyRange(output.HashKeyRange, context) : undefined,
        ParentShards: output.ParentShards != null ? deserializeAws_json1_1ShardIdList(output.ParentShards, context) : undefined,
        ShardId: __expectString(output.ShardId),
    };
};
const deserializeAws_json1_1ChildShardList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ChildShard(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Consumer = (output, context) => {
    return {
        ConsumerARN: __expectString(output.ConsumerARN),
        ConsumerCreationTimestamp: output.ConsumerCreationTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.ConsumerCreationTimestamp)))
            : undefined,
        ConsumerName: __expectString(output.ConsumerName),
        ConsumerStatus: __expectString(output.ConsumerStatus),
    };
};
const deserializeAws_json1_1ConsumerDescription = (output, context) => {
    return {
        ConsumerARN: __expectString(output.ConsumerARN),
        ConsumerCreationTimestamp: output.ConsumerCreationTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.ConsumerCreationTimestamp)))
            : undefined,
        ConsumerName: __expectString(output.ConsumerName),
        ConsumerStatus: __expectString(output.ConsumerStatus),
        StreamARN: __expectString(output.StreamARN),
    };
};
const deserializeAws_json1_1ConsumerList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Consumer(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1DescribeLimitsOutput = (output, context) => {
    return {
        OnDemandStreamCount: __expectInt32(output.OnDemandStreamCount),
        OnDemandStreamCountLimit: __expectInt32(output.OnDemandStreamCountLimit),
        OpenShardCount: __expectInt32(output.OpenShardCount),
        ShardLimit: __expectInt32(output.ShardLimit),
    };
};
const deserializeAws_json1_1DescribeStreamConsumerOutput = (output, context) => {
    return {
        ConsumerDescription: output.ConsumerDescription != null
            ? deserializeAws_json1_1ConsumerDescription(output.ConsumerDescription, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeStreamOutput = (output, context) => {
    return {
        StreamDescription: output.StreamDescription != null
            ? deserializeAws_json1_1StreamDescription(output.StreamDescription, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeStreamSummaryOutput = (output, context) => {
    return {
        StreamDescriptionSummary: output.StreamDescriptionSummary != null
            ? deserializeAws_json1_1StreamDescriptionSummary(output.StreamDescriptionSummary, context)
            : undefined,
    };
};
const deserializeAws_json1_1EnhancedMetrics = (output, context) => {
    return {
        ShardLevelMetrics: output.ShardLevelMetrics != null
            ? deserializeAws_json1_1MetricsNameList(output.ShardLevelMetrics, context)
            : undefined,
    };
};
const deserializeAws_json1_1EnhancedMonitoringList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1EnhancedMetrics(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1EnhancedMonitoringOutput = (output, context) => {
    return {
        CurrentShardLevelMetrics: output.CurrentShardLevelMetrics != null
            ? deserializeAws_json1_1MetricsNameList(output.CurrentShardLevelMetrics, context)
            : undefined,
        DesiredShardLevelMetrics: output.DesiredShardLevelMetrics != null
            ? deserializeAws_json1_1MetricsNameList(output.DesiredShardLevelMetrics, context)
            : undefined,
        StreamName: __expectString(output.StreamName),
    };
};
const deserializeAws_json1_1ExpiredIteratorException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1ExpiredNextTokenException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1GetRecordsOutput = (output, context) => {
    return {
        ChildShards: output.ChildShards != null ? deserializeAws_json1_1ChildShardList(output.ChildShards, context) : undefined,
        MillisBehindLatest: __expectLong(output.MillisBehindLatest),
        NextShardIterator: __expectString(output.NextShardIterator),
        Records: output.Records != null ? deserializeAws_json1_1RecordList(output.Records, context) : undefined,
    };
};
const deserializeAws_json1_1GetShardIteratorOutput = (output, context) => {
    return {
        ShardIterator: __expectString(output.ShardIterator),
    };
};
const deserializeAws_json1_1HashKeyRange = (output, context) => {
    return {
        EndingHashKey: __expectString(output.EndingHashKey),
        StartingHashKey: __expectString(output.StartingHashKey),
    };
};
const deserializeAws_json1_1InternalFailureException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1InvalidArgumentException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1KMSAccessDeniedException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1KMSDisabledException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1KMSInvalidStateException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1KMSNotFoundException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1KMSOptInRequired = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1KMSThrottlingException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1LimitExceededException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1ListShardsOutput = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        Shards: output.Shards != null ? deserializeAws_json1_1ShardList(output.Shards, context) : undefined,
    };
};
const deserializeAws_json1_1ListStreamConsumersOutput = (output, context) => {
    return {
        Consumers: output.Consumers != null ? deserializeAws_json1_1ConsumerList(output.Consumers, context) : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1ListStreamsOutput = (output, context) => {
    return {
        HasMoreStreams: __expectBoolean(output.HasMoreStreams),
        StreamNames: output.StreamNames != null ? deserializeAws_json1_1StreamNameList(output.StreamNames, context) : undefined,
    };
};
const deserializeAws_json1_1ListTagsForStreamOutput = (output, context) => {
    return {
        HasMoreTags: __expectBoolean(output.HasMoreTags),
        Tags: output.Tags != null ? deserializeAws_json1_1TagList(output.Tags, context) : undefined,
    };
};
const deserializeAws_json1_1MetricsNameList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ProvisionedThroughputExceededException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1PutRecordOutput = (output, context) => {
    return {
        EncryptionType: __expectString(output.EncryptionType),
        SequenceNumber: __expectString(output.SequenceNumber),
        ShardId: __expectString(output.ShardId),
    };
};
const deserializeAws_json1_1PutRecordsOutput = (output, context) => {
    return {
        EncryptionType: __expectString(output.EncryptionType),
        FailedRecordCount: __expectInt32(output.FailedRecordCount),
        Records: output.Records != null ? deserializeAws_json1_1PutRecordsResultEntryList(output.Records, context) : undefined,
    };
};
const deserializeAws_json1_1PutRecordsResultEntry = (output, context) => {
    return {
        ErrorCode: __expectString(output.ErrorCode),
        ErrorMessage: __expectString(output.ErrorMessage),
        SequenceNumber: __expectString(output.SequenceNumber),
        ShardId: __expectString(output.ShardId),
    };
};
const deserializeAws_json1_1PutRecordsResultEntryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1PutRecordsResultEntry(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1_Record = (output, context) => {
    return {
        ApproximateArrivalTimestamp: output.ApproximateArrivalTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.ApproximateArrivalTimestamp)))
            : undefined,
        Data: output.Data != null ? context.base64Decoder(output.Data) : undefined,
        EncryptionType: __expectString(output.EncryptionType),
        PartitionKey: __expectString(output.PartitionKey),
        SequenceNumber: __expectString(output.SequenceNumber),
    };
};
const deserializeAws_json1_1RecordList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1_Record(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1RegisterStreamConsumerOutput = (output, context) => {
    return {
        Consumer: output.Consumer != null ? deserializeAws_json1_1Consumer(output.Consumer, context) : undefined,
    };
};
const deserializeAws_json1_1ResourceInUseException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1ResourceNotFoundException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1SequenceNumberRange = (output, context) => {
    return {
        EndingSequenceNumber: __expectString(output.EndingSequenceNumber),
        StartingSequenceNumber: __expectString(output.StartingSequenceNumber),
    };
};
const deserializeAws_json1_1Shard = (output, context) => {
    return {
        AdjacentParentShardId: __expectString(output.AdjacentParentShardId),
        HashKeyRange: output.HashKeyRange != null ? deserializeAws_json1_1HashKeyRange(output.HashKeyRange, context) : undefined,
        ParentShardId: __expectString(output.ParentShardId),
        SequenceNumberRange: output.SequenceNumberRange != null
            ? deserializeAws_json1_1SequenceNumberRange(output.SequenceNumberRange, context)
            : undefined,
        ShardId: __expectString(output.ShardId),
    };
};
const deserializeAws_json1_1ShardIdList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ShardList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Shard(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1StreamDescription = (output, context) => {
    return {
        EncryptionType: __expectString(output.EncryptionType),
        EnhancedMonitoring: output.EnhancedMonitoring != null
            ? deserializeAws_json1_1EnhancedMonitoringList(output.EnhancedMonitoring, context)
            : undefined,
        HasMoreShards: __expectBoolean(output.HasMoreShards),
        KeyId: __expectString(output.KeyId),
        RetentionPeriodHours: __expectInt32(output.RetentionPeriodHours),
        Shards: output.Shards != null ? deserializeAws_json1_1ShardList(output.Shards, context) : undefined,
        StreamARN: __expectString(output.StreamARN),
        StreamCreationTimestamp: output.StreamCreationTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.StreamCreationTimestamp)))
            : undefined,
        StreamModeDetails: output.StreamModeDetails != null
            ? deserializeAws_json1_1StreamModeDetails(output.StreamModeDetails, context)
            : undefined,
        StreamName: __expectString(output.StreamName),
        StreamStatus: __expectString(output.StreamStatus),
    };
};
const deserializeAws_json1_1StreamDescriptionSummary = (output, context) => {
    return {
        ConsumerCount: __expectInt32(output.ConsumerCount),
        EncryptionType: __expectString(output.EncryptionType),
        EnhancedMonitoring: output.EnhancedMonitoring != null
            ? deserializeAws_json1_1EnhancedMonitoringList(output.EnhancedMonitoring, context)
            : undefined,
        KeyId: __expectString(output.KeyId),
        OpenShardCount: __expectInt32(output.OpenShardCount),
        RetentionPeriodHours: __expectInt32(output.RetentionPeriodHours),
        StreamARN: __expectString(output.StreamARN),
        StreamCreationTimestamp: output.StreamCreationTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.StreamCreationTimestamp)))
            : undefined,
        StreamModeDetails: output.StreamModeDetails != null
            ? deserializeAws_json1_1StreamModeDetails(output.StreamModeDetails, context)
            : undefined,
        StreamName: __expectString(output.StreamName),
        StreamStatus: __expectString(output.StreamStatus),
    };
};
const deserializeAws_json1_1StreamModeDetails = (output, context) => {
    return {
        StreamMode: __expectString(output.StreamMode),
    };
};
const deserializeAws_json1_1StreamNameList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1SubscribeToShardEvent = (output, context) => {
    return {
        ChildShards: output.ChildShards != null ? deserializeAws_json1_1ChildShardList(output.ChildShards, context) : undefined,
        ContinuationSequenceNumber: __expectString(output.ContinuationSequenceNumber),
        MillisBehindLatest: __expectLong(output.MillisBehindLatest),
        Records: output.Records != null ? deserializeAws_json1_1RecordList(output.Records, context) : undefined,
    };
};
const deserializeAws_json1_1Tag = (output, context) => {
    return {
        Key: __expectString(output.Key),
        Value: __expectString(output.Value),
    };
};
const deserializeAws_json1_1TagList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Tag(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1UpdateShardCountOutput = (output, context) => {
    return {
        CurrentShardCount: __expectInt32(output.CurrentShardCount),
        StreamName: __expectString(output.StreamName),
        TargetShardCount: __expectInt32(output.TargetShardCount),
    };
};
const deserializeAws_json1_1ValidationException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
