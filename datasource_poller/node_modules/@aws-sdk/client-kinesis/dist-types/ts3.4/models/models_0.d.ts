import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { KinesisServiceException as __BaseException } from "./KinesisServiceException";
export interface AddTagsToStreamInput {
  StreamName: string | undefined;
  Tags: Record<string, string> | undefined;
}
export declare class InvalidArgumentException extends __BaseException {
  readonly name: "InvalidArgumentException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidArgumentException, __BaseException>
  );
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class ResourceInUseException extends __BaseException {
  readonly name: "ResourceInUseException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceInUseException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface HashKeyRange {
  StartingHashKey: string | undefined;
  EndingHashKey: string | undefined;
}
export interface ChildShard {
  ShardId: string | undefined;
  ParentShards: string[] | undefined;
  HashKeyRange: HashKeyRange | undefined;
}
export declare enum ConsumerStatus {
  ACTIVE = "ACTIVE",
  CREATING = "CREATING",
  DELETING = "DELETING",
}
export interface Consumer {
  ConsumerName: string | undefined;
  ConsumerARN: string | undefined;
  ConsumerStatus: ConsumerStatus | string | undefined;
  ConsumerCreationTimestamp: Date | undefined;
}
export interface ConsumerDescription {
  ConsumerName: string | undefined;
  ConsumerARN: string | undefined;
  ConsumerStatus: ConsumerStatus | string | undefined;
  ConsumerCreationTimestamp: Date | undefined;
  StreamARN: string | undefined;
}
export declare enum StreamMode {
  ON_DEMAND = "ON_DEMAND",
  PROVISIONED = "PROVISIONED",
}
export interface StreamModeDetails {
  StreamMode: StreamMode | string | undefined;
}
export interface CreateStreamInput {
  StreamName: string | undefined;
  ShardCount?: number;
  StreamModeDetails?: StreamModeDetails;
}
export interface DecreaseStreamRetentionPeriodInput {
  StreamName: string | undefined;
  RetentionPeriodHours: number | undefined;
}
export interface DeleteStreamInput {
  StreamName: string | undefined;
  EnforceConsumerDeletion?: boolean;
}
export interface DeregisterStreamConsumerInput {
  StreamARN?: string;
  ConsumerName?: string;
  ConsumerARN?: string;
}
export interface DescribeLimitsInput {}
export interface DescribeLimitsOutput {
  ShardLimit: number | undefined;
  OpenShardCount: number | undefined;
  OnDemandStreamCount: number | undefined;
  OnDemandStreamCountLimit: number | undefined;
}
export interface DescribeStreamInput {
  StreamName: string | undefined;
  Limit?: number;
  ExclusiveStartShardId?: string;
}
export declare enum EncryptionType {
  KMS = "KMS",
  NONE = "NONE",
}
export declare enum MetricsName {
  ALL = "ALL",
  INCOMING_BYTES = "IncomingBytes",
  INCOMING_RECORDS = "IncomingRecords",
  ITERATOR_AGE_MILLISECONDS = "IteratorAgeMilliseconds",
  OUTGOING_BYTES = "OutgoingBytes",
  OUTGOING_RECORDS = "OutgoingRecords",
  READ_PROVISIONED_THROUGHPUT_EXCEEDED = "ReadProvisionedThroughputExceeded",
  WRITE_PROVISIONED_THROUGHPUT_EXCEEDED = "WriteProvisionedThroughputExceeded",
}
export interface EnhancedMetrics {
  ShardLevelMetrics?: (MetricsName | string)[];
}
export interface SequenceNumberRange {
  StartingSequenceNumber: string | undefined;
  EndingSequenceNumber?: string;
}
export interface Shard {
  ShardId: string | undefined;
  ParentShardId?: string;
  AdjacentParentShardId?: string;
  HashKeyRange: HashKeyRange | undefined;
  SequenceNumberRange: SequenceNumberRange | undefined;
}
export declare enum StreamStatus {
  ACTIVE = "ACTIVE",
  CREATING = "CREATING",
  DELETING = "DELETING",
  UPDATING = "UPDATING",
}
export interface StreamDescription {
  StreamName: string | undefined;
  StreamARN: string | undefined;
  StreamStatus: StreamStatus | string | undefined;
  StreamModeDetails?: StreamModeDetails;
  Shards: Shard[] | undefined;
  HasMoreShards: boolean | undefined;
  RetentionPeriodHours: number | undefined;
  StreamCreationTimestamp: Date | undefined;
  EnhancedMonitoring: EnhancedMetrics[] | undefined;
  EncryptionType?: EncryptionType | string;
  KeyId?: string;
}
export interface DescribeStreamOutput {
  StreamDescription: StreamDescription | undefined;
}
export interface DescribeStreamConsumerInput {
  StreamARN?: string;
  ConsumerName?: string;
  ConsumerARN?: string;
}
export interface DescribeStreamConsumerOutput {
  ConsumerDescription: ConsumerDescription | undefined;
}
export interface DescribeStreamSummaryInput {
  StreamName: string | undefined;
}
export interface StreamDescriptionSummary {
  StreamName: string | undefined;
  StreamARN: string | undefined;
  StreamStatus: StreamStatus | string | undefined;
  StreamModeDetails?: StreamModeDetails;
  RetentionPeriodHours: number | undefined;
  StreamCreationTimestamp: Date | undefined;
  EnhancedMonitoring: EnhancedMetrics[] | undefined;
  EncryptionType?: EncryptionType | string;
  KeyId?: string;
  OpenShardCount: number | undefined;
  ConsumerCount?: number;
}
export interface DescribeStreamSummaryOutput {
  StreamDescriptionSummary: StreamDescriptionSummary | undefined;
}
export interface DisableEnhancedMonitoringInput {
  StreamName: string | undefined;
  ShardLevelMetrics: (MetricsName | string)[] | undefined;
}
export interface EnhancedMonitoringOutput {
  StreamName?: string;
  CurrentShardLevelMetrics?: (MetricsName | string)[];
  DesiredShardLevelMetrics?: (MetricsName | string)[];
}
export interface EnableEnhancedMonitoringInput {
  StreamName: string | undefined;
  ShardLevelMetrics: (MetricsName | string)[] | undefined;
}
export declare class ExpiredIteratorException extends __BaseException {
  readonly name: "ExpiredIteratorException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ExpiredIteratorException, __BaseException>
  );
}
export declare class ExpiredNextTokenException extends __BaseException {
  readonly name: "ExpiredNextTokenException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ExpiredNextTokenException, __BaseException>
  );
}
export interface GetRecordsInput {
  ShardIterator: string | undefined;
  Limit?: number;
}
export interface _Record {
  SequenceNumber: string | undefined;
  ApproximateArrivalTimestamp?: Date;
  Data: Uint8Array | undefined;
  PartitionKey: string | undefined;
  EncryptionType?: EncryptionType | string;
}
export interface GetRecordsOutput {
  Records: _Record[] | undefined;
  NextShardIterator?: string;
  MillisBehindLatest?: number;
  ChildShards?: ChildShard[];
}
export declare class KMSAccessDeniedException extends __BaseException {
  readonly name: "KMSAccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<KMSAccessDeniedException, __BaseException>
  );
}
export declare class KMSDisabledException extends __BaseException {
  readonly name: "KMSDisabledException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<KMSDisabledException, __BaseException>
  );
}
export declare class KMSInvalidStateException extends __BaseException {
  readonly name: "KMSInvalidStateException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<KMSInvalidStateException, __BaseException>
  );
}
export declare class KMSNotFoundException extends __BaseException {
  readonly name: "KMSNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<KMSNotFoundException, __BaseException>
  );
}
export declare class KMSOptInRequired extends __BaseException {
  readonly name: "KMSOptInRequired";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<KMSOptInRequired, __BaseException>);
}
export declare class KMSThrottlingException extends __BaseException {
  readonly name: "KMSThrottlingException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<KMSThrottlingException, __BaseException>
  );
}
export declare class ProvisionedThroughputExceededException extends __BaseException {
  readonly name: "ProvisionedThroughputExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ProvisionedThroughputExceededException,
      __BaseException
    >
  );
}
export declare enum ShardIteratorType {
  AFTER_SEQUENCE_NUMBER = "AFTER_SEQUENCE_NUMBER",
  AT_SEQUENCE_NUMBER = "AT_SEQUENCE_NUMBER",
  AT_TIMESTAMP = "AT_TIMESTAMP",
  LATEST = "LATEST",
  TRIM_HORIZON = "TRIM_HORIZON",
}
export interface GetShardIteratorInput {
  StreamName: string | undefined;
  ShardId: string | undefined;
  ShardIteratorType: ShardIteratorType | string | undefined;
  StartingSequenceNumber?: string;
  Timestamp?: Date;
}
export interface GetShardIteratorOutput {
  ShardIterator?: string;
}
export interface IncreaseStreamRetentionPeriodInput {
  StreamName: string | undefined;
  RetentionPeriodHours: number | undefined;
}
export declare class InternalFailureException extends __BaseException {
  readonly name: "InternalFailureException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalFailureException, __BaseException>
  );
}
export declare enum ShardFilterType {
  AFTER_SHARD_ID = "AFTER_SHARD_ID",
  AT_LATEST = "AT_LATEST",
  AT_TIMESTAMP = "AT_TIMESTAMP",
  AT_TRIM_HORIZON = "AT_TRIM_HORIZON",
  FROM_TIMESTAMP = "FROM_TIMESTAMP",
  FROM_TRIM_HORIZON = "FROM_TRIM_HORIZON",
}
export interface ShardFilter {
  Type: ShardFilterType | string | undefined;
  ShardId?: string;
  Timestamp?: Date;
}
export interface ListShardsInput {
  StreamName?: string;
  NextToken?: string;
  ExclusiveStartShardId?: string;
  MaxResults?: number;
  StreamCreationTimestamp?: Date;
  ShardFilter?: ShardFilter;
}
export interface ListShardsOutput {
  Shards?: Shard[];
  NextToken?: string;
}
export interface ListStreamConsumersInput {
  StreamARN: string | undefined;
  NextToken?: string;
  MaxResults?: number;
  StreamCreationTimestamp?: Date;
}
export interface ListStreamConsumersOutput {
  Consumers?: Consumer[];
  NextToken?: string;
}
export interface ListStreamsInput {
  Limit?: number;
  ExclusiveStartStreamName?: string;
}
export interface ListStreamsOutput {
  StreamNames: string[] | undefined;
  HasMoreStreams: boolean | undefined;
}
export interface ListTagsForStreamInput {
  StreamName: string | undefined;
  ExclusiveStartTagKey?: string;
  Limit?: number;
}
export interface Tag {
  Key: string | undefined;
  Value?: string;
}
export interface ListTagsForStreamOutput {
  Tags: Tag[] | undefined;
  HasMoreTags: boolean | undefined;
}
export interface MergeShardsInput {
  StreamName: string | undefined;
  ShardToMerge: string | undefined;
  AdjacentShardToMerge: string | undefined;
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface PutRecordInput {
  StreamName: string | undefined;
  Data: Uint8Array | undefined;
  PartitionKey: string | undefined;
  ExplicitHashKey?: string;
  SequenceNumberForOrdering?: string;
}
export interface PutRecordOutput {
  ShardId: string | undefined;
  SequenceNumber: string | undefined;
  EncryptionType?: EncryptionType | string;
}
export interface PutRecordsRequestEntry {
  Data: Uint8Array | undefined;
  ExplicitHashKey?: string;
  PartitionKey: string | undefined;
}
export interface PutRecordsInput {
  Records: PutRecordsRequestEntry[] | undefined;
  StreamName: string | undefined;
}
export interface PutRecordsResultEntry {
  SequenceNumber?: string;
  ShardId?: string;
  ErrorCode?: string;
  ErrorMessage?: string;
}
export interface PutRecordsOutput {
  FailedRecordCount?: number;
  Records: PutRecordsResultEntry[] | undefined;
  EncryptionType?: EncryptionType | string;
}
export interface RegisterStreamConsumerInput {
  StreamARN: string | undefined;
  ConsumerName: string | undefined;
}
export interface RegisterStreamConsumerOutput {
  Consumer: Consumer | undefined;
}
export interface RemoveTagsFromStreamInput {
  StreamName: string | undefined;
  TagKeys: string[] | undefined;
}
export interface SplitShardInput {
  StreamName: string | undefined;
  ShardToSplit: string | undefined;
  NewStartingHashKey: string | undefined;
}
export interface StartStreamEncryptionInput {
  StreamName: string | undefined;
  EncryptionType: EncryptionType | string | undefined;
  KeyId: string | undefined;
}
export interface StopStreamEncryptionInput {
  StreamName: string | undefined;
  EncryptionType: EncryptionType | string | undefined;
  KeyId: string | undefined;
}
export interface StartingPosition {
  Type: ShardIteratorType | string | undefined;
  SequenceNumber?: string;
  Timestamp?: Date;
}
export interface SubscribeToShardInput {
  ConsumerARN: string | undefined;
  ShardId: string | undefined;
  StartingPosition: StartingPosition | undefined;
}
export interface SubscribeToShardEvent {
  Records: _Record[] | undefined;
  ContinuationSequenceNumber: string | undefined;
  MillisBehindLatest: number | undefined;
  ChildShards?: ChildShard[];
}
export declare type SubscribeToShardEventStream =
  | SubscribeToShardEventStream.InternalFailureExceptionMember
  | SubscribeToShardEventStream.KMSAccessDeniedExceptionMember
  | SubscribeToShardEventStream.KMSDisabledExceptionMember
  | SubscribeToShardEventStream.KMSInvalidStateExceptionMember
  | SubscribeToShardEventStream.KMSNotFoundExceptionMember
  | SubscribeToShardEventStream.KMSOptInRequiredMember
  | SubscribeToShardEventStream.KMSThrottlingExceptionMember
  | SubscribeToShardEventStream.ResourceInUseExceptionMember
  | SubscribeToShardEventStream.ResourceNotFoundExceptionMember
  | SubscribeToShardEventStream.SubscribeToShardEventMember
  | SubscribeToShardEventStream.$UnknownMember;
export declare namespace SubscribeToShardEventStream {
  interface SubscribeToShardEventMember {
    SubscribeToShardEvent: SubscribeToShardEvent;
    ResourceNotFoundException?: never;
    ResourceInUseException?: never;
    KMSDisabledException?: never;
    KMSInvalidStateException?: never;
    KMSAccessDeniedException?: never;
    KMSNotFoundException?: never;
    KMSOptInRequired?: never;
    KMSThrottlingException?: never;
    InternalFailureException?: never;
    $unknown?: never;
  }
  interface ResourceNotFoundExceptionMember {
    SubscribeToShardEvent?: never;
    ResourceNotFoundException: ResourceNotFoundException;
    ResourceInUseException?: never;
    KMSDisabledException?: never;
    KMSInvalidStateException?: never;
    KMSAccessDeniedException?: never;
    KMSNotFoundException?: never;
    KMSOptInRequired?: never;
    KMSThrottlingException?: never;
    InternalFailureException?: never;
    $unknown?: never;
  }
  interface ResourceInUseExceptionMember {
    SubscribeToShardEvent?: never;
    ResourceNotFoundException?: never;
    ResourceInUseException: ResourceInUseException;
    KMSDisabledException?: never;
    KMSInvalidStateException?: never;
    KMSAccessDeniedException?: never;
    KMSNotFoundException?: never;
    KMSOptInRequired?: never;
    KMSThrottlingException?: never;
    InternalFailureException?: never;
    $unknown?: never;
  }
  interface KMSDisabledExceptionMember {
    SubscribeToShardEvent?: never;
    ResourceNotFoundException?: never;
    ResourceInUseException?: never;
    KMSDisabledException: KMSDisabledException;
    KMSInvalidStateException?: never;
    KMSAccessDeniedException?: never;
    KMSNotFoundException?: never;
    KMSOptInRequired?: never;
    KMSThrottlingException?: never;
    InternalFailureException?: never;
    $unknown?: never;
  }
  interface KMSInvalidStateExceptionMember {
    SubscribeToShardEvent?: never;
    ResourceNotFoundException?: never;
    ResourceInUseException?: never;
    KMSDisabledException?: never;
    KMSInvalidStateException: KMSInvalidStateException;
    KMSAccessDeniedException?: never;
    KMSNotFoundException?: never;
    KMSOptInRequired?: never;
    KMSThrottlingException?: never;
    InternalFailureException?: never;
    $unknown?: never;
  }
  interface KMSAccessDeniedExceptionMember {
    SubscribeToShardEvent?: never;
    ResourceNotFoundException?: never;
    ResourceInUseException?: never;
    KMSDisabledException?: never;
    KMSInvalidStateException?: never;
    KMSAccessDeniedException: KMSAccessDeniedException;
    KMSNotFoundException?: never;
    KMSOptInRequired?: never;
    KMSThrottlingException?: never;
    InternalFailureException?: never;
    $unknown?: never;
  }
  interface KMSNotFoundExceptionMember {
    SubscribeToShardEvent?: never;
    ResourceNotFoundException?: never;
    ResourceInUseException?: never;
    KMSDisabledException?: never;
    KMSInvalidStateException?: never;
    KMSAccessDeniedException?: never;
    KMSNotFoundException: KMSNotFoundException;
    KMSOptInRequired?: never;
    KMSThrottlingException?: never;
    InternalFailureException?: never;
    $unknown?: never;
  }
  interface KMSOptInRequiredMember {
    SubscribeToShardEvent?: never;
    ResourceNotFoundException?: never;
    ResourceInUseException?: never;
    KMSDisabledException?: never;
    KMSInvalidStateException?: never;
    KMSAccessDeniedException?: never;
    KMSNotFoundException?: never;
    KMSOptInRequired: KMSOptInRequired;
    KMSThrottlingException?: never;
    InternalFailureException?: never;
    $unknown?: never;
  }
  interface KMSThrottlingExceptionMember {
    SubscribeToShardEvent?: never;
    ResourceNotFoundException?: never;
    ResourceInUseException?: never;
    KMSDisabledException?: never;
    KMSInvalidStateException?: never;
    KMSAccessDeniedException?: never;
    KMSNotFoundException?: never;
    KMSOptInRequired?: never;
    KMSThrottlingException: KMSThrottlingException;
    InternalFailureException?: never;
    $unknown?: never;
  }
  interface InternalFailureExceptionMember {
    SubscribeToShardEvent?: never;
    ResourceNotFoundException?: never;
    ResourceInUseException?: never;
    KMSDisabledException?: never;
    KMSInvalidStateException?: never;
    KMSAccessDeniedException?: never;
    KMSNotFoundException?: never;
    KMSOptInRequired?: never;
    KMSThrottlingException?: never;
    InternalFailureException: InternalFailureException;
    $unknown?: never;
  }
  interface $UnknownMember {
    SubscribeToShardEvent?: never;
    ResourceNotFoundException?: never;
    ResourceInUseException?: never;
    KMSDisabledException?: never;
    KMSInvalidStateException?: never;
    KMSAccessDeniedException?: never;
    KMSNotFoundException?: never;
    KMSOptInRequired?: never;
    KMSThrottlingException?: never;
    InternalFailureException?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    SubscribeToShardEvent: (value: SubscribeToShardEvent) => T;
    ResourceNotFoundException: (value: ResourceNotFoundException) => T;
    ResourceInUseException: (value: ResourceInUseException) => T;
    KMSDisabledException: (value: KMSDisabledException) => T;
    KMSInvalidStateException: (value: KMSInvalidStateException) => T;
    KMSAccessDeniedException: (value: KMSAccessDeniedException) => T;
    KMSNotFoundException: (value: KMSNotFoundException) => T;
    KMSOptInRequired: (value: KMSOptInRequired) => T;
    KMSThrottlingException: (value: KMSThrottlingException) => T;
    InternalFailureException: (value: InternalFailureException) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: SubscribeToShardEventStream,
    visitor: Visitor<T>
  ) => T;
}
export interface SubscribeToShardOutput {
  EventStream: AsyncIterable<SubscribeToShardEventStream> | undefined;
}
export declare enum ScalingType {
  UNIFORM_SCALING = "UNIFORM_SCALING",
}
export interface UpdateShardCountInput {
  StreamName: string | undefined;
  TargetShardCount: number | undefined;
  ScalingType: ScalingType | string | undefined;
}
export interface UpdateShardCountOutput {
  StreamName?: string;
  CurrentShardCount?: number;
  TargetShardCount?: number;
}
export interface UpdateStreamModeInput {
  StreamARN: string | undefined;
  StreamModeDetails: StreamModeDetails | undefined;
}
export declare const AddTagsToStreamInputFilterSensitiveLog: (
  obj: AddTagsToStreamInput
) => any;
export declare const HashKeyRangeFilterSensitiveLog: (obj: HashKeyRange) => any;
export declare const ChildShardFilterSensitiveLog: (obj: ChildShard) => any;
export declare const ConsumerFilterSensitiveLog: (obj: Consumer) => any;
export declare const ConsumerDescriptionFilterSensitiveLog: (
  obj: ConsumerDescription
) => any;
export declare const StreamModeDetailsFilterSensitiveLog: (
  obj: StreamModeDetails
) => any;
export declare const CreateStreamInputFilterSensitiveLog: (
  obj: CreateStreamInput
) => any;
export declare const DecreaseStreamRetentionPeriodInputFilterSensitiveLog: (
  obj: DecreaseStreamRetentionPeriodInput
) => any;
export declare const DeleteStreamInputFilterSensitiveLog: (
  obj: DeleteStreamInput
) => any;
export declare const DeregisterStreamConsumerInputFilterSensitiveLog: (
  obj: DeregisterStreamConsumerInput
) => any;
export declare const DescribeLimitsInputFilterSensitiveLog: (
  obj: DescribeLimitsInput
) => any;
export declare const DescribeLimitsOutputFilterSensitiveLog: (
  obj: DescribeLimitsOutput
) => any;
export declare const DescribeStreamInputFilterSensitiveLog: (
  obj: DescribeStreamInput
) => any;
export declare const EnhancedMetricsFilterSensitiveLog: (
  obj: EnhancedMetrics
) => any;
export declare const SequenceNumberRangeFilterSensitiveLog: (
  obj: SequenceNumberRange
) => any;
export declare const ShardFilterSensitiveLog: (obj: Shard) => any;
export declare const StreamDescriptionFilterSensitiveLog: (
  obj: StreamDescription
) => any;
export declare const DescribeStreamOutputFilterSensitiveLog: (
  obj: DescribeStreamOutput
) => any;
export declare const DescribeStreamConsumerInputFilterSensitiveLog: (
  obj: DescribeStreamConsumerInput
) => any;
export declare const DescribeStreamConsumerOutputFilterSensitiveLog: (
  obj: DescribeStreamConsumerOutput
) => any;
export declare const DescribeStreamSummaryInputFilterSensitiveLog: (
  obj: DescribeStreamSummaryInput
) => any;
export declare const StreamDescriptionSummaryFilterSensitiveLog: (
  obj: StreamDescriptionSummary
) => any;
export declare const DescribeStreamSummaryOutputFilterSensitiveLog: (
  obj: DescribeStreamSummaryOutput
) => any;
export declare const DisableEnhancedMonitoringInputFilterSensitiveLog: (
  obj: DisableEnhancedMonitoringInput
) => any;
export declare const EnhancedMonitoringOutputFilterSensitiveLog: (
  obj: EnhancedMonitoringOutput
) => any;
export declare const EnableEnhancedMonitoringInputFilterSensitiveLog: (
  obj: EnableEnhancedMonitoringInput
) => any;
export declare const GetRecordsInputFilterSensitiveLog: (
  obj: GetRecordsInput
) => any;
export declare const _RecordFilterSensitiveLog: (obj: _Record) => any;
export declare const GetRecordsOutputFilterSensitiveLog: (
  obj: GetRecordsOutput
) => any;
export declare const GetShardIteratorInputFilterSensitiveLog: (
  obj: GetShardIteratorInput
) => any;
export declare const GetShardIteratorOutputFilterSensitiveLog: (
  obj: GetShardIteratorOutput
) => any;
export declare const IncreaseStreamRetentionPeriodInputFilterSensitiveLog: (
  obj: IncreaseStreamRetentionPeriodInput
) => any;
export declare const ShardFilterFilterSensitiveLog: (obj: ShardFilter) => any;
export declare const ListShardsInputFilterSensitiveLog: (
  obj: ListShardsInput
) => any;
export declare const ListShardsOutputFilterSensitiveLog: (
  obj: ListShardsOutput
) => any;
export declare const ListStreamConsumersInputFilterSensitiveLog: (
  obj: ListStreamConsumersInput
) => any;
export declare const ListStreamConsumersOutputFilterSensitiveLog: (
  obj: ListStreamConsumersOutput
) => any;
export declare const ListStreamsInputFilterSensitiveLog: (
  obj: ListStreamsInput
) => any;
export declare const ListStreamsOutputFilterSensitiveLog: (
  obj: ListStreamsOutput
) => any;
export declare const ListTagsForStreamInputFilterSensitiveLog: (
  obj: ListTagsForStreamInput
) => any;
export declare const TagFilterSensitiveLog: (obj: Tag) => any;
export declare const ListTagsForStreamOutputFilterSensitiveLog: (
  obj: ListTagsForStreamOutput
) => any;
export declare const MergeShardsInputFilterSensitiveLog: (
  obj: MergeShardsInput
) => any;
export declare const PutRecordInputFilterSensitiveLog: (
  obj: PutRecordInput
) => any;
export declare const PutRecordOutputFilterSensitiveLog: (
  obj: PutRecordOutput
) => any;
export declare const PutRecordsRequestEntryFilterSensitiveLog: (
  obj: PutRecordsRequestEntry
) => any;
export declare const PutRecordsInputFilterSensitiveLog: (
  obj: PutRecordsInput
) => any;
export declare const PutRecordsResultEntryFilterSensitiveLog: (
  obj: PutRecordsResultEntry
) => any;
export declare const PutRecordsOutputFilterSensitiveLog: (
  obj: PutRecordsOutput
) => any;
export declare const RegisterStreamConsumerInputFilterSensitiveLog: (
  obj: RegisterStreamConsumerInput
) => any;
export declare const RegisterStreamConsumerOutputFilterSensitiveLog: (
  obj: RegisterStreamConsumerOutput
) => any;
export declare const RemoveTagsFromStreamInputFilterSensitiveLog: (
  obj: RemoveTagsFromStreamInput
) => any;
export declare const SplitShardInputFilterSensitiveLog: (
  obj: SplitShardInput
) => any;
export declare const StartStreamEncryptionInputFilterSensitiveLog: (
  obj: StartStreamEncryptionInput
) => any;
export declare const StopStreamEncryptionInputFilterSensitiveLog: (
  obj: StopStreamEncryptionInput
) => any;
export declare const StartingPositionFilterSensitiveLog: (
  obj: StartingPosition
) => any;
export declare const SubscribeToShardInputFilterSensitiveLog: (
  obj: SubscribeToShardInput
) => any;
export declare const SubscribeToShardEventFilterSensitiveLog: (
  obj: SubscribeToShardEvent
) => any;
export declare const SubscribeToShardEventStreamFilterSensitiveLog: (
  obj: SubscribeToShardEventStream
) => any;
export declare const SubscribeToShardOutputFilterSensitiveLog: (
  obj: SubscribeToShardOutput
) => any;
export declare const UpdateShardCountInputFilterSensitiveLog: (
  obj: UpdateShardCountInput
) => any;
export declare const UpdateShardCountOutputFilterSensitiveLog: (
  obj: UpdateShardCountOutput
) => any;
export declare const UpdateStreamModeInputFilterSensitiveLog: (
  obj: UpdateStreamModeInput
) => any;
